from playwright.sync_api import sync_playwright  
import pytest  
import os  
import time  
  
def test_complete_metadata_workflow():  
    """Test complet du workflow m√©tadonn√©es enrichies"""  
    with sync_playwright() as p:  
        # Lancer le navigateur en mode visible pour d√©bugger  
        browser = p.chromium.launch(headless=True, slow_mo=1000)  
        page = browser.new_page()  
          
        try:  
            # 1. CONNEXION avec les identifiants par d√©faut  
            print("üîê √âtape 1: Connexion...")  
            page.goto("http://web:8000/login/")  # Utiliser le nom du service Docker  
            # Debug : v√©rifier le contenu de la page  
            print(f"Page title: {page.title()}")  
            page.screenshot(path="/tmp/login_page.png")  
  
            # V√©rifier si les √©l√©ments existent  
            email_input = page.locator("input[name='email']")  
            if email_input.count() == 0:  
                 print("‚ùå Champ email non trouv√© avec input[name='email']")  
                 # Essayer d'autres s√©lecteurs  
                 all_inputs = page.locator("input").all()  
                 for i, input_elem in enumerate(all_inputs):  
                     print(f"Input {i}: {input_elem.get_attribute('name')} - {input_elem.get_attribute('type')}")


            page.fill("input[name='email']", "admin@example.com")  
            page.fill("input[name='password']", "admin123")
 
            page.click("button[type='submit']")  
              
            # Attendre la redirection vers home  
            page.wait_for_url("****/csv-anonymizer/upload/", timeout=10000)  
            print("‚úÖ Connexion r√©ussie")  
              
            # 2. UPLOAD CSV  
            print("üìÅ √âtape 2: Upload du fichier CSV...")  
              
            # Cr√©er un fichier CSV de test avec des donn√©es sensibles  
            test_csv_content = "nom,email,telephone,cin\nJohn Doe,john@example.com,0612345678,AB123456\nMarie Martin,marie@test.fr,0687654321,CD789012"  
            with open("/tmp/test_data.csv", "w") as f:  
                f.write(test_csv_content)  
              
            # Upload du fichier  
            page.set_input_files("input[type='file']", "/tmp/test_data.csv")  
            page.click("button:has-text('D√©marrer l\\'analyse')")  
              
            # Attendre la page de s√©lection d'entit√©s  
            print("‚úÖ Analyse termin√©e, entit√©s d√©tect√©es")  
              
            # 3. NAVIGATION VERS RECOMMANDATIONS  
            print("ü§ñ √âtape 3: Acc√®s aux recommandations...")  
            page.click("a:has-text('Voir les recommandations')")  
            page.wait_for_url("**/recommendations/**", timeout=15000)  
            print("‚úÖ Page recommandations charg√©e")  
              
            # 4. TEST DU BOUTON M√âTADONN√âES  
            print("üìä √âtape 4: Test du bouton m√©tadonn√©es...")  
              
            # Attendre que le bouton soit visible  
            metadata_button = page.locator("a:has-text('Voir les m√©tadonn√©es enrichi')")  
            metadata_button.wait_for(state="visible", timeout=10000)  
              
            if metadata_button.is_visible():  
                metadata_button.click()  
                page.wait_for_url("**/metadata/**", timeout=15000)  
                  
                # Attendre que le tableau se charge  
                page.wait_for_selector("table", timeout=10000)  
                  
                # V√©rifier que le tableau n'est pas vide  
                table_rows = page.locator("tbody tr")  
                row_count = table_rows.count()  
                  
                print(f"üìà Nombre de lignes dans le tableau: {row_count}")  
                  
                if row_count > 0:  
                    print("‚úÖ M√©tadonn√©es affich√©es avec succ√®s")  
                      
                    # V√©rifier les colonnes attendues  
                    assert page.is_visible("th:has-text('Type d\\'Entit√©')")  
                    assert page.is_visible("th:has-text('Niveau de Sensibilit√©')")  
                    assert page.is_visible("th:has-text('Cat√©gorie RGPD')")  
                      
                    # V√©rifier qu'il y a des donn√©es dans la premi√®re ligne  
                    first_row = table_rows.first  
                    assert first_row.is_visible()  
                      
                    print("‚úÖ Test r√©ussi - M√©tadonn√©es correctement affich√©es")  
                else:  
                    print("‚ùå Tableau vide - probl√®me dans _get_enriched_metadata()")  
                    # Prendre une capture d'√©cran pour d√©bugger  
                    page.screenshot(path="/tmp/empty_table_debug.png")  
                    raise AssertionError("Le tableau des m√©tadonn√©es est vide")  
                      
            else:  
                print("‚ùå Bouton m√©tadonn√©es non trouv√©")  
                page.screenshot(path="/tmp/button_not_found.png")  
                raise AssertionError("Bouton 'Voir les m√©tadonn√©es enrichi' non trouv√©")  
                  
        except Exception as e:  
            print(f"‚ùå Erreur: {e}")  
            # Prendre une capture d'√©cran pour d√©bugger  
            page.screenshot(path="/tmp/error_screenshot.png")  
            raise  
              
        finally:  
            # Nettoyer les fichiers temporaires  
            if os.path.exists("/tmp/test_data.csv"):  
                os.remove("/tmp/test_data.csv")  
            browser.close()  
  
if __name__ == "__main__":  
    test_complete_metadata_workflow()